name: Build Windows Addon Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to build (e.g., v1.0.0 or v1.1.0-beta)'
        required: true
        type: string

env:
  LIBFIVE_CHECKOUT_DIR: libfive_src
  CMAKE_BUILD_TYPE: Release
  LIBFIVE_COMMIT_SHA: '71899313d36ce14de6646ef760fa6bbc5c0cc067' # Consider updating periodically
  ADDON_NAME: FieldForge
  VCPKG_TRIPLET: x64-windows # Define vcpkg triplet

jobs:
  build_and_package_windows:
    name: Build libfive and Package Addon (Windows)
    # Use a GitHub-hosted Windows runner with VS 2019 available
    runs-on: [self-hosted, windows-2019, x64, local-run] # This runner should have VS 16 2019

    permissions:
      contents: write # Needed for creating releases

    steps:
      # --- Setup Environment ---
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive
          ref: ${{ env.LIBFIVE_COMMIT_SHA }}
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }}
          fetch-depth: 0

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11 # Or latest stable v11/v12
        id: runvcpkg
        with:
          vcpkgGitCommitId: 'b322364f06308bdd24823f9d8f03fe0cc86fd46f' # Use a known good commit or update
          #vcpkgDirectory: ${{ runner.temporary }}/vcpkg # Use temp dir for vcpkg cache
          vcpkgDirectory: ${{ github.workspace }}/vcpkg_root
          #runVcpkgInstall: true # Let run-vcpkg handle caching

      - name: Install libfive dependencies via vcpkg
        # Install dependencies using the defined triplet
        run: vcpkg install eigen3 libpng zlib boost-math boost-algorithm boost-functional boost-lockfree boost-interval boost-bimap boost-container --triplet ${{ env.VCPKG_TRIPLET }}
        shell: bash # vcpkg commands often work better in bash/pwsh

      # === NEW STEP: Modify CMakeLists.txt using PowerShell ===
      - name: Modify libfive CMake Options
        run: |
          $cmakeFile = "${{ env.LIBFIVE_CHECKOUT_DIR }}/CMakeLists.txt"
          Write-Host "Modifying CMake options in $cmakeFile..."
          # Use PowerShell's -replace operator (regex-based)
          (Get-Content $cmakeFile -Raw) -replace '(?m)^option\(BUILD_STUDIO_APP.*\)',       'option(BUILD_STUDIO_APP "Build Studio application" OFF)' `
                                        -replace '(?m)^option\(BUILD_GUILE_BINDINGS.*\)',    'option(BUILD_GUILE_BINDINGS "Build Guile bindings" OFF)' `
                                        -replace '(?m)^option\(BUILD_PYTHON_BINDINGS.*\)', 'option(BUILD_PYTHON_BINDINGS "Build Python bindings" ON)' `
                                        -replace '(?m)^option\(ENABLE_DEBUG.*\)',          'option(ENABLE_DEBUG "Add debugging Symbols to the binaries" OFF)' | Set-Content $cmakeFile -Encoding UTF8

          Write-Host "CMake options modification complete. Verifying changes (first 50 lines):"
          Get-Content $cmakeFile -TotalCount 50 # Print start of file for verification
        shell: powershell

      - name: Configure CMake for libfive
        # Specify the VS 16 2019 generator using -G
        run: >
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build `
          -G "Visual Studio 16 2019" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
          -DBUILD_SHARED_LIBS=ON `
          -DLIBFIVE_BUILD_GUI=OFF `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        # Removed explicit *_DIR hints, vcpkg toolchain file should handle finding dependencies
        shell: powershell # CMake configuration often better in PowerShell on Windows

      - name: Build libfive
        # Use --parallel flag if supported by the build tool (MSBuild supports it)
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel
        shell: powershell

      # --- Package Addon ---
      - name: Checkout Addon Repository Code
        uses: actions/checkout@v4
        with:
          path: addon_code # Checkout your addon code to a separate directory

      - name: Determine Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Determined version: ${{ env.VERSION }}"
        shell: bash
        
      - name: Create staging directory structure
        # Using bash for consistency with Linux, requires Git Bash on Windows runner
        run: |
          mkdir -p staging/FieldForge
          mkdir -p staging/FieldForge/libfive
          mkdir -p staging/FieldForge/libfive/src
          mkdir -p staging/FieldForge/libfive/stdlib
        shell: bash
  
      - name: Prepare Staging Directory and Copy Addon Files
        run: |
          $stagingRoot = "staging"
          $addonDestDir = Join-Path -Path $stagingRoot -ChildPath "${{ env.ADDON_NAME }}"

          # Ensure staging root exists, remove addon destination if it exists
          if (-not (Test-Path $stagingRoot)) { mkdir $stagingRoot }
          if (Test-Path $addonDestDir) {
            Write-Host "Removing existing destination: $addonDestDir"
            Remove-Item -Path $addonDestDir -Recurse -Force
          }
          # Recreate the base addon destination directory AFTER potential removal
          mkdir $addonDestDir
          Write-Host "Created clean destination: $addonDestDir"

          # Use robocopy to copy source, excluding specified files and directories
          Write-Host "Copying addon files from addon_code to $addonDestDir ..."
          robocopy addon_code $addonDestDir /E `
                   /XD .git* .github* `
                   /XF .gitignore Example.blend LICENSE README.md Screenshot.png libfive* # Exclude specific files AND libfive leftovers

          # Store the exit code immediately
          $RoboExitCode = $LASTEXITCODE

          # Check Robocopy exit code (allow codes < 8)
          if ($RoboExitCode -ge 8) {
              Write-Error "Robocopy failed with exit code $RoboExitCode"
              exit $RoboExitCode # Explicitly fail the step for codes 8+
          } else {
              Write-Host "Robocopy completed with exit code $RoboExitCode (considered success)."
              exit 0 # Explicitly exit the script block with success code 0
          }

          # --- This part is now unreachable if robocopy fails, which is fine ---
          # Create the necessary libfive structure within the addon directory
          $libfiveBase = Join-Path -Path $addonDestDir -ChildPath "libfive"
          $libfiveSrc = Join-Path -Path $libfiveBase -ChildPath "src"
          $libfiveStdlib = Join-Path -Path $libfiveBase -ChildPath "stdlib"
          if (-not (Test-Path $libfiveBase))   { mkdir $libfiveBase }
          if (-not (Test-Path $libfiveSrc))    { mkdir $libfiveSrc }
          if (-not (Test-Path $libfiveStdlib)) { mkdir $libfiveStdlib }
          Write-Host "Ensured libfive directory structure exists in $addonDestDir"

        shell: powershell

      - name: Copy Python Bindings from libfive build
        run: |
          Copy-Item build/libfive/bind/python/libfive/*.py staging/${{ env.ADDON_NAME }}/libfive/
          Copy-Item build/libfive/bind/python/libfive/stdlib/*.py staging/${{ env.ADDON_NAME }}/libfive/stdlib/
        shell: powershell

      - name: Copy Compiled Windows Libraries from Build
        # Copy core lib, stdlib, and necessary dependencies from vcpkg installed dir
        run: |
          $buildDir = "build"
          $targetDir = "staging/${{ env.ADDON_NAME }}/libfive/src" # Put all DLLs together in src/ for simplicity
          $vcpkgBinDir = "${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}/bin"

          Copy-Item "$buildDir/libfive/src/${{ env.CMAKE_BUILD_TYPE }}/libfive.dll"         -Destination $targetDir
          Copy-Item "$buildDir/libfive/stdlib/${{ env.CMAKE_BUILD_TYPE }}/libfive-stdlib.dll" -Destination $targetDir
          # Copy dependencies directly from vcpkg bin directory - this is more reliable
          Copy-Item "$vcpkgBinDir/libpng*.dll" -Destination $targetDir -ErrorAction SilentlyContinue # Use wildcard
          Copy-Item "$vcpkgBinDir/zlib*.dll"   -Destination $targetDir -ErrorAction SilentlyContinue # Use wildcard
          # Add any other potential runtime dependencies identified (e.g., from Boost if needed)
          # Copy-Item "$vcpkgBinDir/boost_*.dll" -Destination $targetDir -ErrorAction SilentlyContinue
        shell: powershell

      - name: Create Windows zip file
        shell: powershell
        run: |
          Compress-Archive -Path staging/${{ env.ADDON_NAME }} -DestinationPath "../${{ env.ADDON_NAME }}-win-${{ env.VERSION }}.zip" -Force
          Write-Host "Created zip file: ${{ env.ADDON_NAME }}-win-${{ env.VERSION }}.zip"

      # --- Create/Update GitHub Release ---
      - name: Create Release and Upload Windows Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || github.ref_name }}
          name: Release ${{ env.VERSION }} (libfive @${{ env.LIBFIVE_COMMIT_SHA }})
          draft: false
          prerelease: contains(env.VERSION, '-')
          files: ${{ env.ADDON_NAME }}-win-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
