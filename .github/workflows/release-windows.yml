name: Build Windows Addon Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      # Define an input for the version/tag name when run manually
      version_tag:
        description: 'Version tag to build (e.g., v1.0.0 or v1.1.0-beta)'
        required: true
        type: string

env:
  LIBFIVE_CHECKOUT_DIR: libfive_src
  CMAKE_BUILD_TYPE: Release
  LIBFIVE_COMMIT_SHA: '71899313d36ce14de6646ef760fa6bbc5c0cc067'
  # Define VCPKG_ROOT if it's not already set globally on your runner
  # VCPKG_ROOT: 'C:/path/to/your/vcpkg' # Example - Adjust if needed

jobs:
  build_and_package_windows:
    name: Build libfive and Package Addon (Windows)
    runs-on: [self-hosted, windows, x64, local-run] # <-- ADJUST TO YOUR WINDOWS RUNNER LABELS

    permissions:
      contents: write # Needed for softprops/action-gh-release

    steps:
      # --- Build libfive ---
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive
          ref: ${{ env.LIBFIVE_COMMIT_SHA }}
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }}

      # If vcpkg isn't setup globally on the runner, uncomment and adjust this
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11 # Or @v12
        id: runvcpkg
        with:
          # Define a path within the workflow's workspace for vcpkg
          vcpkgGitCommitId: 'b322364f06308bdd24823f9d8f03fe0cc86fd46f'
          vcpkgDirectory: ${{ github.workspace }}/vcpkg_root
  
      # Make sure dependencies are installed on the runner OR run this step
      - name: Install libfive dependencies via vcpkg
        run: vcpkg install eigen3 libpng zlib boost-math boost-algorithm boost-functional boost-lockfree boost-interval boost-bimap boost-container --triplet x64-windows
        #run: >
        #  vcpkg install --triplet x64-windows
        #  eigen3
        #  boost-container
        #  boost-bimap
        #  boost-interval
        #  boost-lockfree
        #  boost-functional
        #  boost-algorithm
        #  boost-math
        #  libpng
        #  python3
        shell: powershell  # vcpkg command usually works best in pwsh/cmd

      - name: Configure CMake for libfive
        run: >
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build `
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
          -DBUILD_SHARED_LIBS=ON `
          -DLIBFIVE_BUILD_STUDIO=OFF `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg_root/scripts/buildsystems/vcpkg.cmake" `
          -Deigen3_DIR="${{ github.workspace }}/vcpkg_root/installed/x64-windows/share/eigen3" `
          -DZLIB_DIR="${{ github.workspace }}/vcpkg_root/installed/x64-windows/share/zlib" `
          -DPNG_DIR="${{ github.workspace }}/vcpkg_root/installed/x64-windows/share/libpng"
        shell: powershell 

      # === CHANGE: Build only, NO install ===
      - name: Build libfive
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }}
        shell: powershell  # CMake build often works better in pwsh/cmd on Windows

      # --- Package Addon ---
      - name: Checkout Addon Repository Code
        uses: actions/checkout@v4
        with:
          path: addon_code # Checkout your addon code to a separate directory

      # === ADDED: Consistent Version Handling ===
      - name: Determine Version
        id: get_version
        # If triggered manually, use the input. If triggered by tag, use the tag name.
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
        shell: bash # bash is good for this string manipulation

      - name: Create staging directory structure
        # Using bash for consistency with Linux, requires Git Bash on Windows runner
        run: |
          mkdir -p staging/FieldForge
          mkdir -p staging/FieldForge/libfive/src
          mkdir -p staging/FieldForge/libfive/stdlib
        shell: bash

      - name: Copy Addon Python files (__init__.py only)
        # Only copy the addon's top-level files. Libfive's python files come from build step.
        run: cp addon_code/__init__.py staging/FieldForge/
        shell: bash

      # === ADDED: Copy Python Bindings from libfive build ===
      - name: Copy Python Bindings from libfive build
        run: |
          cp build/libfive/bind/python/libfive/*.py staging/FieldForge/libfive/
          cp build/libfive/bind/python/libfive/stdlib/*.py staging/FieldForge/libfive/stdlib/
        shell: bash

      - name: Copy Compiled Windows Libraries from Build
        # NOTE: Copying from build dir now. Path includes build type ('Release').
        # Assumes dependency DLLs (zlib, libpng) are copied by CMake/vcpkg next to libfive.dll.
        # If not, adjust paths to find them (e.g., in vcpkg install tree bin dir).
        run: |
          cp build/libfive/src/${{ env.CMAKE_BUILD_TYPE }}/libfive.dll staging/FieldForge/libfive/src/
          cp build/libfive/stdlib/${{ env.CMAKE_BUILD_TYPE }}/libfive-stdlib.dll staging/FieldForge/libfive/src/ # Usually goes alongside libfive.dll
          cp build/libfive/src/${{ env.CMAKE_BUILD_TYPE }}/libpng*.dll staging/FieldForge/libfive/src/ # Use wildcard for potential versioned name
          cp build/libfive/src/${{ env.CMAKE_BUILD_TYPE }}/zlib*.dll staging/FieldForge/libfive/src/   # Use wildcard for potential versioned name
        shell: bash # Use bash for cross-platform compatible cp

      - name: Create Windows zip file
        run: |
          cd staging
          zip -r ../FieldForge-win-${{ env.VERSION }}.zip FieldForge/
          cd ..
        shell: bash # zip command needs to be available (e.g., via Git Bash)

      # --- Create/Update GitHub Release ---
      - name: Create Release and Upload Windows Asset
        uses: softprops/action-gh-release@v1
        # NOTE: Removed the 'if' condition - should run for tags and manual dispatch
        with:
          # Use the input tag name when run manually, otherwise the pushed tag
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || github.ref_name }}
          # Use determined version and correct commit SHA variable
          name: Release ${{ env.VERSION }} (libfive @${{ env.LIBFIVE_COMMIT_SHA }})
          draft: false
          # Prerelease check now uses the determined version string
          prerelease: contains(env.VERSION, '-')
          # Use determined version in the filename
          files: FieldForge-win-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
