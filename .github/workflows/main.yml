name: Build libfive and Create Addon Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0

env:
  # Directory where libfive source will be checked out
  LIBFIVE_CHECKOUT_DIR: libfive_src
  # Build configuration
  CMAKE_BUILD_TYPE: Release
  # === IMPORTANT: Specify a libfive tag/commit for stability! ===
  # Use a specific release tag (e.g., 'v0.17.0') instead of 'main' for reproducible builds.
  # Find tags here: https://github.com/libfive/libfive/tags
  LIBFIVE_VERSION_TAG: 'main' # Replace 'main' with a specific tag like 'v0.17.0'

jobs:
  #=================================================
  # Job: Build libfive for Windows
  #=================================================
  build-windows:
    name: Build libfive (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive # Specify the external repository
          ref: ${{ env.LIBFIVE_VERSION_TAG }} # Checkout the specified tag/branch
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }} # Checkout into this directory

      - name: Setup vcpkg (for C++ dependencies)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 'a5e9e37f8a7e105e00367117d64fd96d14e369f9'

      - name: Install libfive dependencies via vcpkg
        run: |
          echo "Installing dependencies..."
          vcpkg install eigen3 libpng zlib --triplet x64-windows
        shell: pwsh

      - name: Configure CMake for libfive
        run: |
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build `
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
            -DBUILD_SHARED_LIBS=ON `
            -DLIBFIVE_BUILD_STUDIO=OFF `
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        shell: pwsh

      - name: Build and Install libfive
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --target install
        shell: pwsh

      - name: Prepare Windows Artifacts
        run: |
          mkdir -p ${{ github.workspace }}/artifact/src
          mkdir -p ${{ github.workspace }}/artifact/stdlib
          cp ${{ github.workspace }}/install/bin/libfive.dll ${{ github.workspace }}/artifact/src/
          cp ${{ github.workspace }}/install/bin/libfive-stdlib.dll ${{ github.workspace }}/artifact/stdlib/
          cp ${{ github.workspace }}/install/bin/libpng16.dll ${{ github.workspace }}/artifact/src/
          cp ${{ github.workspace }}/install/bin/zlib1.dll ${{ github.workspace }}/artifact/src/
        shell: pwsh

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libfive-win
          path: ${{ github.workspace }}/artifact/

  #=================================================
  # Job: Build libfive for macOS
  #=================================================
  build-macos:
    name: Build libfive (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive # Specify the external repository
          ref: ${{ env.LIBFIVE_VERSION_TAG }} # Checkout the specified tag/branch
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }} # Checkout into this directory

      - name: Install libfive dependencies via Homebrew
        run: brew install cmake eigen libpng

      - name: Configure CMake for libfive
        run: |
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DBUILD_SHARED_LIBS=ON \
            -DLIBFIVE_BUILD_STUDIO=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install \
            -DCMAKE_PREFIX_PATH=$(brew --prefix eigen);$(brew --prefix libpng)

      - name: Build and Install libfive
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --target install

      - name: Prepare macOS Artifacts
        run: |
          mkdir -p ${{ github.workspace }}/artifact/src
          mkdir -p ${{ github.workspace }}/artifact/stdlib
          cp ${{ github.workspace }}/install/lib/libfive.dylib ${{ github.workspace }}/artifact/src/
          cp ${{ github.workspace }}/install/lib/libfive-stdlib.dylib ${{ github.workspace }}/artifact/stdlib/

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libfive-mac
          path: ${{ github.workspace }}/artifact/

  #=================================================
  # Job: Build libfive for Linux
  #=================================================
  build-linux:
    name: Build libfive (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive
          ref: ${{ env.LIBFIVE_VERSION_TAG }}
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }}

      - name: Install libfive dependencies via apt
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libeigen3-dev libpng-dev zlib1g-dev

      - name: Configure CMake for libfive
        run: |
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build \
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
            -DBUILD_SHARED_LIBS=ON \
            -DLIBFIVE_BUILD_STUDIO=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install

      - name: Build and Install libfive
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --target install

      - name: Prepare Linux Artifacts
        run: |
          mkdir -p ${{ github.workspace }}/artifact/src
          mkdir -p ${{ github.workspace }}/artifact/stdlib
          cp ${{ github.workspace }}/install/lib/libfive.so ${{ github.workspace }}/artifact/src/
          cp ${{ github.workspace }}/install/lib/libfive-stdlib.so ${{ github.workspace }}/artifact/stdlib/

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libfive-lin
          path: ${{ github.workspace }}/artifact/

  #=================================================
  # Job: Package Addon and Create Release
  #=================================================
  package-and-release:
    name: Package Addon and Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux] # Depends on build jobs

    steps:
      # --- Checkout YOUR Addon Repository Code ---
      - name: Checkout Addon Code (Python parts)
        uses: actions/checkout@v4
        # This checks out the repository where the workflow file resides

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # --- Download Compiled Artifacts ---
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: libfive-win
          path: artifacts/win

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: libfive-mac
          path: artifacts/mac

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: libfive-lin
          path: artifacts/lin

      # --- Prepare Staging Directory ---
      - name: Create staging directory structure
        run: |
          mkdir -p staging/FieldForge
          mkdir -p staging/FieldForge/libfive/src
          mkdir -p staging/FieldForge/libfive/stdlib

      # --- Copy Files to Staging ---
      - name: Copy Addon Python files
        # Copy files from YOUR repository checkout
        run: |
          cp __init__.py staging/FieldForge/
          # Copy the Python parts of the libfivepy wrapper from your repo
          cp libfive/__init__.py staging/FieldForge/libfive/
          cp libfive/ffi.py staging/FieldForge/libfive/
          cp libfive/runner.py staging/FieldForge/libfive/
          cp libfive/shape.py staging/FieldForge/libfive/
          cp libfive/stdlib/__init__.py staging/FieldForge/libfive/stdlib/
          cp libfive/stdlib/csg.py staging/FieldForge/libfive/stdlib/
          cp libfive/stdlib/shapes.py staging/FieldForge/libfive/stdlib/
          cp libfive/stdlib/text.py staging/FieldForge/libfive/stdlib/
          cp libfive/stdlib/transforms.py staging/FieldForge/libfive/stdlib/

      - name: Copy Compiled Windows Libraries
        run: |
          cp artifacts/win/src/* staging/FieldForge/libfive/src/
          cp artifacts/win/stdlib/* staging/FieldForge/libfive/stdlib/

      - name: Copy Compiled macOS Libraries
        run: |
          cp artifacts/mac/src/* staging/FieldForge/libfive/src/
          cp artifacts/mac/stdlib/* staging/FieldForge/libfive/stdlib/

      - name: Copy Compiled Linux Libraries
        run: |
          cp artifacts/lin/src/* staging/FieldForge/libfive/src/
          cp artifacts/lin/stdlib/* staging/FieldForge/libfive/stdlib/

      # --- Create Zip Archive ---
      - name: Create zip file
        run: |
          cd staging
          zip -r ../FieldForge-${{ env.VERSION }}.zip FieldForge/
          cd ..

      # --- Create GitHub Release ---
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }} (libfive ${{ env.LIBFIVE_VERSION_TAG }}) # Add libfive version info
          draft: false
          prerelease: contains(github.ref_name, '-')
          files: FieldForge-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
