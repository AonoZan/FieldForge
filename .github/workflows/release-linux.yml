name: Build Linux Addon Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0
  workflow_dispatch:
    inputs:
      # Define an input for the version/tag name when run manually
      version_tag:
        description: 'Version tag to build (e.g., v1.0.0 or v1.1.0-beta)'
        required: true
        type: string

env:
  LIBFIVE_CHECKOUT_DIR: libfive_src
  CMAKE_BUILD_TYPE: Release
  LIBFIVE_COMMIT_SHA: '71899313d36ce14de6646ef760fa6bbc5c0cc067'

jobs:
  build_and_package_linux:
    name: Build libfive and Package Addon (Linux)
    runs-on: [self-hosted, linux, x64, local-run] # <-- ADJUST TO YOUR LINUX RUNNER LABELS

    permissions:
      contents: write

    steps:
      # --- Build libfive ---
      - name: Checkout libfive Source Code
        uses: actions/checkout@v4
        with:
          repository: libfive/libfive
          ref: ${{ env.LIBFIVE_COMMIT_SHA }}
          path: ${{ env.LIBFIVE_CHECKOUT_DIR }}

      # - name: Install libfive dependencies via apt # Ensure apt/sudo works OR pre-install
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y build-essential cmake libeigen3-dev libpng-dev zlib1g-dev
      # === END OF COMMENTED STEP ===

      - name: Modify libfive CMake Options
        run: |
          CMAKE_FILE="${{ env.LIBFIVE_CHECKOUT_DIR }}/CMakeLists.txt"
          echo "Modifying CMake options in ${CMAKE_FILE}..."
          # Use sed to replace the entire line containing the option.
          # This is generally safer than trying to just replace ON/OFF if spacing/comments vary.
          # Ensure the replacement string exactly matches the desired line format.
          sed -i 's/^option(BUILD_STUDIO_APP.*)/option(BUILD_STUDIO_APP "Build Studio application" OFF)/' "${CMAKE_FILE}"
          sed -i 's/^option(BUILD_GUILE_BINDINGS.*)/option(BUILD_GUILE_BINDINGS "Build Guile bindings" OFF)/' "${CMAKE_FILE}"
          sed -i 's/^option(BUILD_PYTHON_BINDINGS.*)/option(BUILD_PYTHON_BINDINGS "Build Python bindings" ON)/' "${CMAKE_FILE}"
          sed -i 's/^option(ENABLE_DEBUG.*)/option(ENABLE_DEBUG "Add debugging Symbols to the binaries" OFF)/' "${CMAKE_FILE}"

          echo "CMake options modification complete. Verifying changes (first 50 lines):"
          head -n 50 "${CMAKE_FILE}" # Print start of file for verification
        shell: bash

      - name: Configure CMake for libfive
        run: >
          cmake -S ${{ env.LIBFIVE_CHECKOUT_DIR }} -B build
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
          -DBUILD_SHARED_LIBS=ON
          -DLIBFIVE_BUILD_STUDIO=OFF
          -DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE
          -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE
          -DCMAKE_INSTALL_RPATH='$ORIGIN/../src'
      
      # === CHANGE: Build only, NO install ===
      - name: Build libfive
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }}

      # --- Package Addon ---
      - name: Checkout Addon Repository Code
        uses: actions/checkout@v4
        with:
          path: addon_code

      - name: Determine Version
        id: get_version
        # If triggered manually, use the input. If triggered by tag, use the tag name.
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create staging directory structure
        run: |
          mkdir -p staging/FieldForge
          mkdir -p staging/FieldForge/libfive/src
          mkdir -p staging/FieldForge/libfive/stdlib

      - name: Copy Addon Python files
        run: |
          cp addon_code/__init__.py staging/FieldForge/
          
      - name: Fix RPATH for libfive-stdlib.so
        run: |
          # Set the RPATH of stdlib to look in its own directory for libfive.so
          chrpath --replace '$ORIGIN' build/libfive/stdlib/libfive-stdlib.so
          
      - name: Copy Python Bindings
        run: |
          cp build/libfive/bind/python/libfive/*.py staging/FieldForge/libfive/
          cp build/libfive/bind/python/libfive/stdlib/*.py staging/FieldForge/libfive/stdlib/
        shell: bash
        
      - name: Copy Compiled Linux Libraries from Build
        run: |
          cp build/libfive/src/libfive.so staging/FieldForge/libfive/src/
          cp build/libfive/stdlib/libfive-stdlib.so staging/FieldForge/libfive/src/
          
      - name: Create Linux zip file
        run: |
          cd staging
          zip -r ../FieldForge-lin-${{ env.VERSION }}.zip FieldForge/
          cd ..
        shell: bash

      # --- Create/Update GitHub Release ---
      - name: Create Release and Upload Linux Asset
        uses: softprops/action-gh-release@v1
        # NOTE: This will try to create/update a release named after the INPUT tag
        # Be careful when running manually - ensure the input tag matches an intended release
        with:
          # Use the input tag name when run manually, otherwise the pushed tag
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_tag || github.ref_name }}
          name: Release ${{ env.VERSION }} (libfive @${{ env.LIBFIVE_COMMIT_SHA }})
          draft: false
          # Prerelease check now uses the determined version string
          prerelease: contains(env.VERSION, '-')
          # Use determined version in the filename
          files: FieldForge-lin-${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
